:host {
  --blue-primary: 59, 130, 246;
  --blue-secondary: 99, 179, 237;
  --green-primary: 34, 197, 94;
  --green-secondary: 16, 185, 129;
  --red-primary: 239, 68, 68;
  --red-secondary: 220, 38, 38;

  display: block;
  height: 100%;
  z-index: inherit;
  position: relative;
}

// When popover is open anywhere in the calendar, force all appointment cards to stay below
:host-context(.popover-open) {
  z-index: 1 !important;

  * {
    z-index: 1 !important;
  }

  // Override all specific z-index values when popover is open
  .appointment-card {
    z-index: 1 !important;

    &:hover,
    &:active,
    &:focus,
    &.active,
    &.dragging,
    &.resizing,
    &.actively-resizing {
      z-index: 1 !important;
      transform: none !important; // Also prevent scaling above popover
    }

    &::before,
    &::after {
      z-index: 1 !important;
    }
  }

  // Override drag and resize handles
  .drag-handle,
  .resize-handle,
  .appointment-drag-handle {
    z-index: 1 !important;

    &:hover,
    &:active {
      z-index: 1 !important;
    }
  }

  // Override all global resize states
  &.appointment-resizing .appointment-card:not(.actively-resizing) {
    z-index: 1 !important;

    &:hover {
      z-index: 1 !important;
    }
  }
}

// Global styles for resize state
:host-context(body.appointment-resizing) {
  .appointment-card:not(.actively-resizing) {
    opacity: 0.4;
    filter: grayscale(20%);
    transform: scale(0.98);
    transition: opacity 0.2s ease, filter 0.2s ease, transform 0.2s ease;

    > *:not(.resize-handle) {
      pointer-events: none;
    }

    .resize-handle {
      pointer-events: auto !important;
      opacity: 0.6 !important;
    }

    &:hover {
      opacity: 0.8 !important;
      transform: scale(1) !important;
      z-index: 600 !important;

      .resize-handle {
        opacity: 1 !important;
      }
    }
  }
}

.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Ensure appointment cards align perfectly with time slot borders
.appointment-card {
  box-sizing: border-box;
  margin: 0;
  transition: height 0.1s ease-out, z-index 0s;
  position: relative;
  border-top: 1px solid transparent;
  border-bottom: 1px solid transparent;

  &:first-child {
    border-top: none;
  }

  &:last-child {
    border-bottom: none;
  }

  &.actively-resizing {
    box-shadow: 0 12px 35px rgba(var(--blue-primary), 0.5),
      0 6px 15px rgba(var(--blue-primary), 0.4);
    border: 3px solid theme("colors.blue.500");
    transform: scale(1.05);
    background: linear-gradient(
      135deg,
      rgba(var(--blue-primary), 0.15),
      rgba(var(--blue-secondary), 0.08)
    );
    z-index: 1000 !important;

    &::before {
      content: "";
      position: absolute;
      top: -3px;
      left: -3px;
      right: -3px;
      bottom: -3px;
      background: linear-gradient(
        135deg,
        rgba(var(--blue-primary), 0.4),
        rgba(var(--blue-secondary), 0.3)
      );
      border-radius: 8px;
      z-index: -1;
      filter: blur(6px);
      animation: glowPulse 2s ease-in-out infinite alternate;
    }

    h4 {
      color: theme("colors.blue.700") !important;
      font-weight: 600;
      text-shadow: 0 0 8px rgba(var(--blue-primary), 0.3);
    }
  }

  // Add a bottom hover zone to make resize more discoverable (only when resize is enabled)
  &:not(.actively-resizing):not(.disable-resize) {
    &::after {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 8px;
      background: transparent;
      cursor: ns-resize;
      z-index: 250; // Lower than drag handle (300)
      opacity: 0;
      transition: opacity 0.2s ease;
      pointer-events: auto;
    }

    &:hover::after {
      opacity: 1;
      background: linear-gradient(
        to bottom,
        transparent,
        rgba(59, 130, 246, 0.15)
      );
      // Add horizontal line to clearly identify slot boundary
      border-bottom: 3px solid rgba(59, 130, 246, 0.9);
      box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
    }

    // Ensure drag handle always takes precedence over resize area
    &:hover .drag-handle-center {
      z-index: 300 !important;
      pointer-events: auto !important;
    }
  }

  // Resize state styling
  &.resizing {
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4),
      0 4px 12px rgba(59, 130, 246, 0.3);
    border: 2px solid theme("colors.blue.500");
    border-bottom: 3px solid theme("colors.blue.600");
    z-index: 100; // Ensure resizing appointment is on top
    transform: scale(1.02); // Slightly scale up to make it more prominent
    background: linear-gradient(
      135deg,
      rgba(59, 130, 246, 0.1),
      rgba(99, 179, 237, 0.05)
    );

    // Add a subtle glow effect
    &::before {
      content: "";
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: linear-gradient(
        135deg,
        rgba(59, 130, 246, 0.3),
        rgba(99, 179, 237, 0.2)
      );
      border-radius: 6px;
      z-index: -1;
      filter: blur(4px);
    }

    .resize-handle {
      opacity: 1 !important;
      background-color: theme("colors.blue.500");

      // Add pulsing animation to the resize handle
      &::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 12px;
        height: 3px;
        background: theme("colors.blue.400");
        border-radius: 2px;
        animation: pulse 1.5s ease-in-out infinite;
      }
    }
  }

  // Show resize handle on hover for overlapping appointments
  &:hover {
    z-index: 500 !important; // Force to front on hover, higher than any other appointment
    position: relative; // Ensure z-index takes effect

    .resize-handle {
      opacity: 1 !important;
      z-index: 1050 !important; // Even higher z-index for the handle itself
    }
  }

  // Ensure appointments remain hoverable even during global resize
  &:not(.actively-resizing) {
    &:hover {
      cursor: default; // Reset cursor for appointment body

      .resize-handle {
        cursor: ns-resize !important; // Ensure resize cursor on handle
      }
    }
  }

  /* Drag and drop styles */
  user-select: none;
  touch-action: none;

  &.dragging {
    opacity: 0.95;
    transform: scale(1.05) rotate(2deg);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.25),
      0 0 0 3px rgba(34, 197, 94, 0.5);
    z-index: 1000;
    position: relative;
    transition: none; // Disable transitions during drag for smooth movement
    border-left-color: #22c55e !important; // green-500
    background: linear-gradient(
      135deg,
      rgba(34, 197, 94, 0.1),
      rgba(16, 185, 129, 0.05)
    ) !important;

    // Add animated glow effect
    &::before {
      content: "";
      position: absolute;
      top: -5px;
      left: -5px;
      right: -5px;
      bottom: -5px;
      background: linear-gradient(
        135deg,
        rgba(34, 197, 94, 0.3),
        rgba(16, 185, 129, 0.2)
      );
      border-radius: 8px;
      z-index: -1;
      filter: blur(8px);
      animation: dragGlow 1.5s ease-in-out infinite alternate;
    }

    &.invalid-drag-target {
      opacity: 0.7;
      border-left-color: #ef4444 !important; // red-500
      background: linear-gradient(
        135deg,
        rgba(239, 68, 68, 0.1),
        rgba(220, 38, 38, 0.05)
      ) !important;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.25),
        0 0 0 3px rgba(239, 68, 68, 0.5);

      &::before {
        background: linear-gradient(
          135deg,
          rgba(239, 68, 68, 0.3),
          rgba(220, 38, 38, 0.2)
        );
        animation: dragGlowError 1s ease-in-out infinite alternate;
      }

      .resize-handle {
        display: none; // Hide resize handle during invalid drag
      }
    }
  }

  &.compact.dragging {
    transform: scale(1.05);
  }
}

// Global styles for drag state
:host-context(body.appointment-dragging) {
  .appointment-card:not(.actively-dragging) {
    opacity: 0.25;
    filter: grayscale(50%) blur(1px);
    transform: scale(0.96);
    transition: opacity 0.3s ease, filter 0.3s ease, transform 0.3s ease;

    // Disable interaction during drag
    > *:not(.resize-handle) {
      pointer-events: none;
    }
  }

  // Highlight the actively dragging card
  .appointment-card.actively-dragging {
    z-index: 1001 !important;
    position: relative;
  }

  .time-slot {
    pointer-events: none;

    &.blocked {
      background-color: rgba(156, 163, 175, 0.1); // gray-400 with opacity
      opacity: 0.5;
      position: relative;

      &::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: repeating-linear-gradient(
          45deg,
          transparent,
          transparent 10px,
          rgba(156, 163, 175, 0.2) 10px,
          rgba(156, 163, 175, 0.2) 20px
        );
        pointer-events: none;
      }
    }

    &.past::before {
      background: repeating-linear-gradient(
        45deg,
        transparent,
        transparent 8px,
        rgba(107, 114, 128, 0.3) 8px,
        rgba(107, 114, 128, 0.3) 16px
      );
    }

    &.weekend::before {
      background: repeating-linear-gradient(
        45deg,
        transparent,
        transparent 12px,
        rgba(239, 68, 68, 0.2) 12px,
        rgba(239, 68, 68, 0.2) 24px
      );
    }

    &.holiday::before {
      background: repeating-linear-gradient(
        45deg,
        transparent,
        transparent 15px,
        rgba(245, 101, 101, 0.25) 15px,
        rgba(245, 101, 101, 0.25) 30px
      );
    }
  }
}

// Resize handle styling
.resize-handle {
  z-index: 1000 !important; // Extremely high z-index to ensure visibility above all appointments
  border-radius: 0 0 4px 4px; // Rounded bottom corners
  position: relative; // Ensure z-index takes effect
  pointer-events: auto !important; // Always ensure pointer events work

  // Make handle more visible with a subtle background
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      to bottom,
      transparent,
      rgba(59, 130, 246, 0.1)
    );
    border-radius: inherit;
    z-index: inherit;
  }

  &:hover {
    background-color: rgba(59, 130, 246, 0.15) !important;
    z-index: 1100 !important; // Even higher on hover

    &::before {
      background: linear-gradient(
        to bottom,
        transparent,
        rgba(59, 130, 246, 0.25)
      );
    }
  }

  &:active {
    background-color: rgba(59, 130, 246, 0.3) !important;
    z-index: 1200 !important; // Highest when active
  }
}

// Ensure resize handles are always interactive, even during global resize
:host-context(body.appointment-resizing) .resize-handle {
  pointer-events: auto !important;
  cursor: ns-resize !important;
  z-index: 1100 !important;

  &:hover {
    z-index: 1200 !important;
    background-color: rgba(59, 130, 246, 0.2) !important;
  }
}

// Visual feedback during resize
.resizing {
  .resize-handle::after {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(
      90deg,
      transparent,
      theme("colors.blue.500"),
      transparent
    );
    animation: resizeGlow 1s ease-in-out infinite alternate;
  }
}

// Enhanced cursor and hover states for drag functionality
.appointment-card {
  &.cursor-grab {
    &:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
  }

  &.cursor-grabbing {
    cursor: grabbing !important;

    * {
      cursor: grabbing !important;
    }
  }
}

// Month view specific styles
:host.compact.disable-resize {
  .appointment-card.cursor-grab {
    cursor: grab !important;

    &:hover {
      cursor: grab !important;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(34, 197, 94, 0.25);
    }
  }

  .appointment-card.cursor-grabbing {
    cursor: grabbing !important;

    * {
      cursor: grabbing !important;
    }
  }
}

// Drag handle styles for all views
.appointment-card {
  // Central drag handle
  .drag-handle-center {
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 300; // Higher than resize pseudo-element
    position: absolute; // Ensure proper positioning

    .drag-icon {
      animation: dragIconPulse 2s ease-in-out infinite;
      background: rgba(59, 130, 246, 0.9);
      backdrop-filter: blur(4px);
      transition: all 0.2s ease;
    }

    &:hover .drag-icon {
      background: rgba(37, 99, 235, 1);
      transform: scale(1.1);
    }
  }

  &:hover {
    .drag-handle-center {
      opacity: 1;
      z-index: 300; // Ensure it stays above resize areas
    }

    // Ensure the drag handle appears above content
    z-index: 100;
  }

  // Override any resize cursor in the center area where drag handle is
  .drag-handle-center,
  .drag-handle-center:hover,
  .drag-handle-center * {
    cursor: move !important;
    pointer-events: auto !important;
  }
}

// Ensure drag handle cursor always takes precedence
.appointment-card .drag-handle-center,
.appointment-card .drag-handle-center:hover,
.appointment-card .drag-handle-center *,
.appointment-card .drag-handle-center:hover * {
  cursor: move !important;
  z-index: 300 !important;
}

// Override any conflicting cursor rules within the drag handle area
.appointment-card:hover .drag-handle-center {
  cursor: move !important;
  z-index: 300 !important;
}

.appointment-card:hover .drag-handle-center::before,
.appointment-card:hover .drag-handle-center::after {
  cursor: move !important;
  z-index: 300 !important;
}

// Month view specific styles
.month-view-appointment {
  cursor: pointer; // Default cursor for clicking to open panel

  // Completely disable resize cursor
  &::after {
    display: none !important;
  }

  &:hover {
    // Ensure no resize cursor appears anywhere
    cursor: pointer !important;

    &::after {
      display: none !important;
    }
  }
}

// Ensure month view appointments never show resize indicators
.month-view-appointment,
.month-view-appointment:hover,
.month-view-appointment::after,
.month-view-appointment:hover::after {
  cursor: pointer !important;
}

// Day/Week view specific styles
.day-week-view-appointment {
  cursor: grab;

  &:hover {
    cursor: grab;
  }

  &.dragging {
    cursor: grabbing;
  }
}

// Drag handle cursor for all views
.drag-handle-center {
  cursor: move !important;
}

// Day/Week view specific styles
.day-week-view-appointment {
  cursor: grab;

  &:hover {
    cursor: grab;
  }

  &.dragging {
    cursor: grabbing;
  }
}

// Enhanced pulse animation for drag icon
@keyframes dragIconPulse {
  0%,
  100% {
    transform: scale(1);
    opacity: 0.8;
  }
  50% {
    transform: scale(1.1);
    opacity: 1;
  }
}

// Apply the enhanced pulse to drag icon
.month-view-appointment {
  .drag-handle-center {
    .drag-icon {
      animation: dragIconPulse 2s ease-in-out infinite;
    }
  }
}

@keyframes dragIconPulse {
  0%,
  100% {
    opacity: 0.8;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.1);
  }
}

@keyframes glowPulse {
  0% {
    opacity: 0.4;
    transform: scale(1);
  }
  100% {
    opacity: 0.7;
    transform: scale(1.02);
  }
}

@keyframes pulse {
  0%,
  100% {
    opacity: 0.6;
    transform: translate(-50%, -50%) scale(1);
  }
  50% {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.1);
  }
}

@keyframes resizeGlow {
  from {
    opacity: 0.5;
  }
  to {
    opacity: 1;
  }
}

@keyframes dragGlow {
  from {
    opacity: 0.3;
    filter: blur(8px);
  }
  to {
    opacity: 0.6;
    filter: blur(12px);
  }
}

@keyframes dragGlowError {
  from {
    opacity: 0.3;
    filter: blur(8px);
  }
  to {
    opacity: 0.7;
    filter: blur(12px);
  }
}

// Compact mode specific styles
:host(.compact) {
  .appointment-card {
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);

    &:hover {
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
        0 2px 4px -1px rgba(0, 0, 0, 0.06);
      transform: translateY(-1px);
    }
  }
}

// Disable hover effects when disableHover is true
:host(.disable-hover) {
  .appointment-card {
    &:hover {
      transform: none !important;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1),
        0 1px 2px 0 rgba(0, 0, 0, 0.06) !important;
    }
  }
}

// Status indicator styles
.status-dot {
  transition: all 0.2s ease-in-out;
}
